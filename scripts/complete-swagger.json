{
  "openapi": "3.0.0",
  "info": {
    "title": "Looper Food Waste Reduction API",
    "version": "1.0.0",
    "description": "# Looper API Documentation\n\nWelcome to the comprehensive API documentation for Looper, the food waste reduction marketplace platform.\n\n## Authentication\n\nThis API uses JWT (JSON Web Tokens) for authentication. To access protected endpoints:\n\n1. Register or login to get an access token\n2. Include the token in the Authorization header: `Bearer <your-token>`\n3. Tokens expire in 15 minutes - use the refresh endpoint to get new tokens\n\n## Features\n\n- **User Management**: Registration, authentication, profile management\n- **Business Operations**: Create and manage food businesses  \n- **Food Listings**: List surplus food items with discounts\n- **Order Management**: Complete order lifecycle with pickup verification\n- **Payment Processing**: Integrated payment gateway with digital wallet\n- **Real-time Messaging**: Communication between users and businesses\n- **Impact Tracking**: Monitor environmental impact and savings",
    "contact": {
      "name": "Looper API Support",
      "email": "api-support@looper.com",
      "url": "https://looper.com/support"
    }
  },
  "servers": [
    {
      "url": "http://localhost:5000",
      "description": "Development server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Enter your JWT token in the format: Bearer <token>"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "email": { "type": "string", "format": "email" },
          "fullName": { "type": "string" },
          "role": { "type": "string", "enum": ["consumer", "business_owner", "admin"] },
          "isVerified": { "type": "boolean" },
          "pointsBalance": { "type": "integer" },
          "walletBalance": { "type": "string" },
          "totalMealsRescued": { "type": "integer" }
        }
      },
      "Tokens": {
        "type": "object",
        "properties": {
          "accessToken": { "type": "string" },
          "refreshToken": { "type": "string" }
        }
      },
      "Business": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "businessName": { "type": "string" },
          "description": { "type": "string" },
          "address": { "type": "string" },
          "businessType": { 
            "type": "string", 
            "enum": ["restaurant", "hotel", "bakery", "supermarket", "cafe", "caterer"] 
          },
          "verificationStatus": { 
            "type": "string", 
            "enum": ["pending", "verified", "rejected"] 
          },
          "averageRating": { "type": "number" },
          "totalReviews": { "type": "integer" }
        }
      },
      "FoodListing": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "businessId": { "type": "string", "format": "uuid" },
          "title": { "type": "string" },
          "description": { "type": "string" },
          "listingType": { 
            "type": "string", 
            "enum": ["individual", "whoop_bag", "chef_special", "mystery_box"] 
          },
          "originalPrice": { "type": "number" },
          "discountedPrice": { "type": "number" },
          "quantity": { "type": "integer" },
          "availableQuantity": { "type": "integer" },
          "pickupWindowStart": { "type": "string", "format": "date-time" },
          "pickupWindowEnd": { "type": "string", "format": "date-time" },
          "estimatedCo2Savings": { "type": "number" },
          "status": { 
            "type": "string", 
            "enum": ["active", "sold_out", "expired", "cancelled"] 
          }
        }
      },
      "Order": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "userId": { "type": "string", "format": "uuid" },
          "businessId": { "type": "string", "format": "uuid" },
          "totalAmount": { "type": "number" },
          "status": { 
            "type": "string", 
            "enum": ["pending_payment", "paid", "confirmed", "ready_for_pickup", "completed", "cancelled", "disputed"] 
          },
          "pickupCode": { "type": "string" },
          "createdAt": { "type": "string", "format": "date-time" }
        }
      },
      "WalletTransaction": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "userId": { "type": "string", "format": "uuid" },
          "type": { "type": "string", "enum": ["credit", "debit", "refund"] },
          "amount": { "type": "string" },
          "description": { "type": "string" },
          "createdAt": { "type": "string", "format": "date-time" }
        }
      },
      "Review": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "userId": { "type": "string", "format": "uuid" },
          "businessId": { "type": "string", "format": "uuid" },
          "orderId": { "type": "string", "format": "uuid" },
          "rating": { "type": "integer", "minimum": 1, "maximum": 5 },
          "comment": { "type": "string" },
          "createdAt": { "type": "string", "format": "date-time" }
        }
      },
      "Message": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "senderId": { "type": "string", "format": "uuid" },
          "businessId": { "type": "string", "format": "uuid" },
          "content": { "type": "string" },
          "messageType": { "type": "string", "enum": ["support", "order_inquiry", "business_chat"] },
          "isRead": { "type": "boolean" },
          "createdAt": { "type": "string", "format": "date-time" }
        }
      },
      "Notification": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "userId": { "type": "string", "format": "uuid" },
          "title": { "type": "string" },
          "message": { "type": "string" },
          "type": { "type": "string" },
          "isRead": { "type": "boolean" },
          "createdAt": { "type": "string", "format": "date-time" }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": { "type": "string" },
          "message": { "type": "string" },
          "details": { "type": "string" }
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/api/auth/register": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Register a new user",
        "description": "Create a new user account with email and password",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email", "password", "fullName"],
                "properties": {
                  "email": { "type": "string", "format": "email", "example": "user@example.com" },
                  "password": { "type": "string", "minLength": 8, "example": "securePassword123" },
                  "fullName": { "type": "string", "minLength": 2, "example": "John Doe" },
                  "phone": { "type": "string", "example": "+1234567890" }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": { "$ref": "#/components/schemas/User" },
                    "tokens": { "$ref": "#/components/schemas/Tokens" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or user already exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Login user",
        "description": "Authenticate user with email and password",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email", "password"],
                "properties": {
                  "email": { "type": "string", "format": "email", "example": "user@example.com" },
                  "password": { "type": "string", "example": "securePassword123" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": { "$ref": "#/components/schemas/User" },
                    "tokens": { "$ref": "#/components/schemas/Tokens" }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/api/auth/refresh": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Refresh access token",
        "description": "Get a new access token using refresh token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["refreshToken"],
                "properties": {
                  "refreshToken": { "type": "string", "example": "eyJhbGciOiJIUzI1NiIs..." }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token refreshed successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Tokens" }
              }
            }
          },
          "401": {
            "description": "Invalid refresh token",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Logout user",
        "description": "Logout current user and invalidate tokens",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Logout successful" }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/api/auth/google": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Get Google OAuth URL",
        "description": "Get URL for Google OAuth authentication",
        "responses": {
          "200": {
            "description": "Google OAuth URL",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "authUrl": { "type": "string", "example": "https://accounts.google.com/oauth2/auth?..." }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Authentication"],
        "summary": "Google OAuth authentication",
        "description": "Authenticate with Google ID token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["idToken"],
                "properties": {
                  "idToken": { "type": "string", "example": "eyJhbGciOiJSUzI1NiIs..." }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Google authentication successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": { "$ref": "#/components/schemas/User" },
                    "token": { "type": "string" },
                    "refreshToken": { "type": "string" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Google authentication failed"
          }
        }
      }
    },
    "/api/auth/google/callback": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Google OAuth callback",
        "description": "Handle Google OAuth callback with authorization code",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["code"],
                "properties": {
                  "code": { "type": "string", "example": "4/0AX4XfWh..." }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Google authentication successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": { "$ref": "#/components/schemas/User" },
                    "tokens": { "$ref": "#/components/schemas/Tokens" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/forgot-password": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Request password reset",
        "description": "Request password reset for user account",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email"],
                "properties": {
                  "email": { "type": "string", "format": "email", "example": "user@example.com" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset email sent"
          }
        }
      }
    },
    "/api/auth/reset-password": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Reset password",
        "description": "Reset user password with token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["token", "newPassword"],
                "properties": {
                  "token": { "type": "string", "format": "uuid" },
                  "newPassword": { "type": "string", "minLength": 8 }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successful"
          },
          "400": {
            "description": "Invalid or expired token"
          }
        }
      }
    },
    "/api/auth/me": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Get current user profile",
        "description": "Get authenticated user's profile information",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Current user profile",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/upload": {
      "post": {
        "tags": ["File Upload"],
        "summary": "Upload file",
        "description": "Upload a file to Cloudinary CDN",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "url": { "type": "string", "example": "https://cloudinary-url/image.jpg" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "No file uploaded"
          }
        }
      }
    },
    "/api/users/profile": {
      "get": {
        "tags": ["User Management"],
        "summary": "Get user profile",
        "description": "Get current user's detailed profile",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "401": { "description": "Unauthorized" }
        }
      },
      "put": {
        "tags": ["User Management"],
        "summary": "Update user profile",
        "description": "Update current user's profile information",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "fullName": { "type": "string" },
                  "phone": { "type": "string" },
                  "userType": { "type": "string", "enum": ["consumer", "business_owner"] }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          }
        }
      }
    },
    "/api/users/impact": {
      "get": {
        "tags": ["User Management"],
        "summary": "Get user impact statistics",
        "description": "Get environmental impact data for current user",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "User impact statistics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalMealsRescued": { "type": "integer" },
                    "co2Saved": { "type": "number" },
                    "moneySaved": { "type": "number" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/users/favorites": {
      "get": {
        "tags": ["User Management"],
        "summary": "Get user favorites",
        "description": "Get user's favorite businesses and listings",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Filter by type",
            "schema": { "type": "string", "enum": ["business", "listing"] }
          }
        ],
        "responses": {
          "200": {
            "description": "User favorites",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "entityId": { "type": "string" },
                      "type": { "type": "string", "enum": ["business", "listing"] }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["User Management"],
        "summary": "Add favorite",
        "description": "Add item to user favorites",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["entityId", "type"],
                "properties": {
                  "entityId": { "type": "string" },
                  "type": { "type": "string", "enum": ["business", "listing"] }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Favorite added successfully"
          }
        }
      }
    },
    "/api/users/favorites/{entityId}": {
      "delete": {
        "tags": ["User Management"],
        "summary": "Remove favorite",
        "description": "Remove item from user favorites",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "entityId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "type",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "enum": ["business", "listing"] }
          }
        ],
        "responses": {
          "200": {
            "description": "Favorite removed successfully"
          }
        }
      }
    },
    "/api/users/refer": {
      "post": {
        "tags": ["User Management"],
        "summary": "Refer a friend",
        "description": "Create a referral for another user",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["referredEmail"],
                "properties": {
                  "referredEmail": { "type": "string", "format": "email" }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Referral created successfully"
          }
        }
      }
    },
    "/api/users/referrals": {
      "get": {
        "tags": ["User Management"],
        "summary": "Get user referrals",
        "description": "Get list of user's referrals",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "User referrals",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "referredEmail": { "type": "string", "format": "email" },
                      "status": { "type": "string" },
                      "createdAt": { "type": "string", "format": "date-time" }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/users/points-history": {
      "get": {
        "tags": ["User Management"],
        "summary": "Get points history",
        "description": "Get user's points transaction history",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Points history",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "points": { "type": "integer" },
                      "description": { "type": "string" },
                      "createdAt": { "type": "string", "format": "date-time" }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/businesses": {
      "post": {
        "tags": ["Business Management"],
        "summary": "Create business",
        "description": "Create a new food business",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": ["businessName", "address", "businessType"],
                "properties": {
                  "businessName": { "type": "string", "example": "Green Eats Restaurant" },
                  "description": { "type": "string" },
                  "address": { "type": "string" },
                  "businessType": { 
                    "type": "string", 
                    "enum": ["restaurant", "hotel", "bakery", "supermarket", "cafe", "caterer"]
                  },
                  "latitude": { "type": "number" },
                  "longitude": { "type": "number" },
                  "logo": { "type": "string", "format": "binary" },
                  "coverImage": { "type": "string", "format": "binary" }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Business created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Business" }
              }
            }
          }
        }
      }
    },
    "/api/businesses/my": {
      "get": {
        "tags": ["Business Management"],
        "summary": "Get my businesses",
        "description": "Get all businesses owned by current user",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "List of user's businesses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Business" }
                }
              }
            }
          }
        }
      }
    },
    "/api/businesses/{id}": {
      "get": {
        "tags": ["Business Management"],
        "summary": "Get business details",
        "description": "Get detailed information about a business",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Business details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Business" }
              }
            }
          },
          "404": { "description": "Business not found" }
        }
      },
      "put": {
        "tags": ["Business Management"],
        "summary": "Update business",
        "description": "Update business information",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "businessName": { "type": "string" },
                  "description": { "type": "string" },
                  "address": { "type": "string" },
                  "latitude": { "type": "string" },
                  "longitude": { "type": "string" },
                  "openingHours": { "type": "object" },
                  "logo": { "type": "string", "format": "binary" },
                  "coverImage": { "type": "string", "format": "binary" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Business updated successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Business" }
              }
            }
          }
        }
      }
    },
    "/api/businesses/search": {
      "get": {
        "tags": ["Business Management"],
        "summary": "Search businesses",
        "description": "Search for businesses with filters",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Search query",
            "schema": { "type": "string" }
          },
          {
            "name": "latitude",
            "in": "query",
            "description": "Latitude for location search",
            "schema": { "type": "string" }
          },
          {
            "name": "longitude",
            "in": "query",
            "description": "Longitude for location search",
            "schema": { "type": "string" }
          },
          {
            "name": "radius",
            "in": "query",
            "description": "Search radius in km",
            "schema": { "type": "string" }
          },
          {
            "name": "businessType",
            "in": "query",
            "description": "Filter by business type",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Search results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Business" }
                }
              }
            }
          }
        }
      }
    },
    "/api/businesses/{id}/staff": {
      "post": {
        "tags": ["Business Management"],
        "summary": "Invite staff member",
        "description": "Invite a staff member to join the business",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email", "role"],
                "properties": {
                  "email": { "type": "string", "format": "email" },
                  "role": { "type": "string", "enum": ["manager", "staff"] }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Staff invitation sent"
          }
        }
      }
    },
    "/api/staff-invitations/accept": {
      "post": {
        "tags": ["Business Management"],
        "summary": "Accept staff invitation",
        "description": "Accept invitation to join a business as staff",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["token"],
                "properties": {
                  "token": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invitation accepted successfully"
          }
        }
      }
    },
    "/api/listings": {
      "post": {
        "tags": ["Food Listings"],
        "summary": "Create food listing",
        "description": "Create a new food listing for surplus food",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": ["businessId", "title", "originalPrice", "discountedPrice", "quantity"],
                "properties": {
                  "businessId": { "type": "string" },
                  "title": { "type": "string" },
                  "description": { "type": "string" },
                  "listingType": { 
                    "type": "string", 
                    "enum": ["individual", "whoop_bag", "chef_special", "mystery_box"]
                  },
                  "originalPrice": { "type": "string" },
                  "discountedPrice": { "type": "string" },
                  "quantity": { "type": "number" },
                  "pickupWindowStart": { "type": "string" },
                  "pickupWindowEnd": { "type": "string" },
                  "allergenInfo": { "type": "string" },
                  "ingredients": { "type": "string" },
                  "dietaryTagIds": { "type": "array", "items": { "type": "string" } },
                  "media": { "type": "array", "items": { "type": "string", "format": "binary" } }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Food listing created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FoodListing" }
              }
            }
          }
        }
      }
    },
    "/api/listings/search": {
      "get": {
        "tags": ["Food Listings"],
        "summary": "Search food listings",
        "description": "Search for available food listings with filters",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Search query",
            "schema": { "type": "string" }
          },
          {
            "name": "latitude",
            "in": "query",
            "description": "Latitude for location search",
            "schema": { "type": "string" }
          },
          {
            "name": "longitude",
            "in": "query",
            "description": "Longitude for location search",
            "schema": { "type": "string" }
          },
          {
            "name": "radius",
            "in": "query",
            "description": "Search radius in km",
            "schema": { "type": "string" }
          },
          {
            "name": "businessType",
            "in": "query",
            "description": "Filter by business type",
            "schema": { "type": "string" }
          },
          {
            "name": "maxPrice",
            "in": "query",
            "description": "Maximum price filter",
            "schema": { "type": "string" }
          },
          {
            "name": "dietaryTags",
            "in": "query",
            "description": "Dietary tags filter",
            "schema": { "type": "string" }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sort results by",
            "schema": { "type": "string", "enum": ["expiry", "price", "rating", "distance"] }
          }
        ],
        "responses": {
          "200": {
            "description": "Search results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/FoodListing" }
                }
              }
            }
          }
        }
      }
    },
    "/api/listings/{id}": {
      "get": {
        "tags": ["Food Listings"],
        "summary": "Get listing details",
        "description": "Get detailed information about a food listing",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Listing details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FoodListing" }
              }
            }
          },
          "404": { "description": "Listing not found" }
        }
      },
      "put": {
        "tags": ["Food Listings"],
        "summary": "Update food listing",
        "description": "Update food listing information",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": { "type": "string" },
                  "description": { "type": "string" },
                  "originalPrice": { "type": "string" },
                  "discountedPrice": { "type": "string" },
                  "quantity": { "type": "number" },
                  "availableQuantity": { "type": "number" },
                  "pickupWindowStart": { "type": "string" },
                  "pickupWindowEnd": { "type": "string" },
                  "status": { "type": "string", "enum": ["active", "paused", "sold_out"] }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Listing updated successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FoodListing" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Food Listings"],
        "summary": "Delete food listing",
        "description": "Delete a food listing",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Listing deleted successfully" }
        }
      }
    },
    "/api/orders": {
      "post": {
        "tags": ["Order Management"],
        "summary": "Create order",
        "description": "Create a new order for food items",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["items", "paymentMethod"],
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "listingId": { "type": "string" },
                        "quantity": { "type": "integer" },
                        "unitPrice": { "type": "number" }
                      }
                    }
                  },
                  "paymentMethod": { 
                    "type": "string", 
                    "enum": ["card", "wallet", "hybrid"]
                  },
                  "useWalletCredit": { "type": "boolean" },
                  "specialInstructions": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Order" }
              }
            }
          }
        }
      }
    },
    "/api/orders/my": {
      "get": {
        "tags": ["Order Management"],
        "summary": "Get my orders",
        "description": "Get all orders for current user",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "List of user's orders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Order" }
                }
              }
            }
          }
        }
      }
    },
    "/api/orders/{id}": {
      "get": {
        "tags": ["Order Management"],
        "summary": "Get order details",
        "description": "Get detailed information about an order",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Order details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Order" }
              }
            }
          },
          "404": { "description": "Order not found" }
        }
      }
    },
    "/api/orders/{id}/status": {
      "put": {
        "tags": ["Order Management"],
        "summary": "Update order status",
        "description": "Update the status of an order",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["status"],
                "properties": {
                  "status": { 
                    "type": "string", 
                    "enum": ["confirmed", "ready_for_pickup", "completed", "cancelled"] 
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order status updated successfully"
          }
        }
      }
    },
    "/api/orders/{id}/verify-pickup": {
      "post": {
        "tags": ["Order Management"],
        "summary": "Verify order pickup",
        "description": "Verify that order has been picked up",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["pickupCode"],
                "properties": {
                  "pickupCode": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pickup verified successfully"
          }
        }
      }
    },
    "/api/businesses/{businessId}/orders": {
      "get": {
        "tags": ["Order Management"],
        "summary": "Get business orders",
        "description": "Get all orders for a specific business",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "businessId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Business orders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Order" }
                }
              }
            }
          }
        }
      }
    },
    "/api/payments/initialize": {
      "post": {
        "tags": ["Payments"],
        "summary": "Initialize payment",
        "description": "Initialize payment for an order",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["orderId", "amount", "paymentMethod"],
                "properties": {
                  "orderId": { "type": "string" },
                  "amount": { "type": "number" },
                  "paymentMethod": { "type": "string", "enum": ["card", "wallet", "hybrid"] }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment initialized successfully"
          }
        }
      }
    },
    "/api/wallet/balance": {
      "get": {
        "tags": ["Wallet"],
        "summary": "Get wallet balance",
        "description": "Get current user's wallet balance",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Wallet balance",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "balance": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/wallet/transactions": {
      "get": {
        "tags": ["Wallet"],
        "summary": "Get wallet transactions",
        "description": "Get user's wallet transaction history",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Wallet transactions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/WalletTransaction" }
                }
              }
            }
          }
        }
      }
    },
    "/api/wallet/topup": {
      "post": {
        "tags": ["Wallet"],
        "summary": "Top up wallet",
        "description": "Add funds to user's wallet",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["amount"],
                "properties": {
                  "amount": { "type": "number", "minimum": 0 }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Wallet top-up successful"
          }
        }
      }
    },
    "/api/reviews": {
      "post": {
        "tags": ["Reviews"],
        "summary": "Create review",
        "description": "Create a review for an order",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["orderId", "ratingFood", "ratingService"],
                "properties": {
                  "orderId": { "type": "string" },
                  "ratingFood": { "type": "integer", "minimum": 1, "maximum": 5 },
                  "ratingService": { "type": "integer", "minimum": 1, "maximum": 5 },
                  "ratingPackaging": { "type": "integer", "minimum": 1, "maximum": 5 },
                  "ratingValue": { "type": "integer", "minimum": 1, "maximum": 5 },
                  "comment": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Review created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Review" }
              }
            }
          }
        }
      }
    },
    "/api/businesses/{businessId}/reviews": {
      "get": {
        "tags": ["Reviews"],
        "summary": "Get business reviews",
        "description": "Get all reviews for a business",
        "parameters": [
          {
            "name": "businessId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Business reviews",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Review" }
                }
              }
            }
          }
        }
      }
    },
    "/api/users/reviews": {
      "get": {
        "tags": ["Reviews"],
        "summary": "Get user reviews",
        "description": "Get all reviews written by current user",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "User reviews",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Review" }
                }
              }
            }
          }
        }
      }
    },
    "/api/messages": {
      "post": {
        "tags": ["Messaging"],
        "summary": "Send message",
        "description": "Send a message to another user or business",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["content", "messageType"],
                "properties": {
                  "receiverId": { "type": "string" },
                  "businessId": { "type": "string" },
                  "orderId": { "type": "string" },
                  "subject": { "type": "string" },
                  "content": { "type": "string" },
                  "messageType": { "type": "string", "enum": ["support", "order_inquiry", "business_chat"] }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Message sent successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Message" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Messaging"],
        "summary": "Get messages",
        "description": "Get user's messages",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "businessId",
            "in": "query",
            "description": "Filter by business ID",
            "schema": { "type": "string" }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter by message type",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "User messages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Message" }
                }
              }
            }
          }
        }
      }
    },
    "/api/messages/{id}/read": {
      "put": {
        "tags": ["Messaging"],
        "summary": "Mark message as read",
        "description": "Mark a message as read",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Message marked as read"
          }
        }
      }
    },
    "/api/notifications": {
      "get": {
        "tags": ["Notifications"],
        "summary": "Get notifications",
        "description": "Get user's notifications",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "User notifications",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Notification" }
                }
              }
            }
          }
        }
      }
    },
    "/api/notifications/{id}/read": {
      "put": {
        "tags": ["Notifications"],
        "summary": "Mark notification as read",
        "description": "Mark a notification as read",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Notification marked as read"
          }
        }
      }
    },
    "/api/notifications/read-all": {
      "put": {
        "tags": ["Notifications"],
        "summary": "Mark all notifications as read",
        "description": "Mark all notifications as read for current user",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "All notifications marked as read"
          }
        }
      }
    },
    "/api/dietary-tags": {
      "get": {
        "tags": ["Utility"],
        "summary": "Get dietary tags",
        "description": "Get list of available dietary tags",
        "responses": {
          "200": {
            "description": "List of dietary tags",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string" },
                      "name": { "type": "string" },
                      "description": { "type": "string" }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/businesses/{businessId}/analytics": {
      "get": {
        "tags": ["Analytics"],
        "summary": "Get business analytics",
        "description": "Get analytics data for a business",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "businessId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date for analytics",
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date for analytics",
            "schema": { "type": "string", "format": "date" }
          }
        ],
        "responses": {
          "200": {
            "description": "Business analytics data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalOrders": { "type": "integer" },
                    "totalRevenue": { "type": "number" },
                    "totalMealsRescued": { "type": "integer" },
                    "co2Saved": { "type": "number" }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "User registration, login, and token management"
    },
    {
      "name": "User Management",
      "description": "User profile and account management"
    },
    {
      "name": "Business Management",
      "description": "Business creation and management operations"
    },
    {
      "name": "Food Listings",
      "description": "Food listing creation, search, and management"
    },
    {
      "name": "Order Management",
      "description": "Order lifecycle and management"
    },
    {
      "name": "Payments",
      "description": "Payment processing and transactions"
    },
    {
      "name": "Wallet",
      "description": "Digital wallet operations"
    },
    {
      "name": "Reviews",
      "description": "Review and rating system"
    },
    {
      "name": "Messaging",
      "description": "Real-time messaging system"
    },
    {
      "name": "Notifications",
      "description": "User notification system"
    },
    {
      "name": "File Upload",
      "description": "File upload and media management"
    },
    {
      "name": "Utility",
      "description": "Utility endpoints and reference data"
    },
    {
      "name": "Analytics",
      "description": "Business analytics and reporting"
    }
  ]
}